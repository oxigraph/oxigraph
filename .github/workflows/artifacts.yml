name: Artifacts

on:
  push:
    branches:
      - main
  release:
    types:
      - published

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  binary_linux:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: rustup update && rustup target add aarch64-unknown-linux-gnu
      - run: |
          sudo apt update && sudo apt install -y g++-aarch64-linux-gnu
          echo -e "\n\n[target.aarch64-unknown-linux-gnu]\nlinker = \"aarch64-linux-gnu-gcc\"" >> .cargo/config.toml
      - uses: Swatinem/rust-cache@v2
      - run: cargo build --release
        working-directory: ./server
      - run: cargo build --release --target aarch64-unknown-linux-gnu
        working-directory: ./server
        env:
          BINDGEN_EXTRA_CLANG_ARGS: --sysroot /usr/aarch64-linux-gnu
      - uses: actions/upload-artifact@v3
        with:
          name: oxigraph_server_x86_64_linux_gnu
          path: target/release/oxigraph_server
      - uses: actions/upload-artifact@v3
        with:
          name: oxigraph_server_aarch64-linux_gnu
          path: target/aarch64-unknown-linux-gnu/release/oxigraph_server
      - run: mv target/release/oxigraph_server oxigraph_server_${{ github.event.release.tag_name }}_x86_64_linux_gnu
        if: github.event_name == 'release'
      - run: mv target/aarch64-unknown-linux-gnu/release/oxigraph_server oxigraph_server_${{ github.event.release.tag_name }}_aarch64_linux_gnu
        if: github.event_name == 'release'
      - uses: softprops/action-gh-release@v1
        with:
          files: |
            oxigraph_server_${{ github.event.release.tag_name }}_x86_64_linux_gnu
            oxigraph_server_${{ github.event.release.tag_name }}_aarch64_linux_gnu
        if: github.event_name == 'release'

  binary_mac:
    runs-on: macos-latest
    env:
      DEVELOPER_DIR: '/Applications/Xcode.app/Contents/Developer'
      SDKROOT: '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk'
      MACOSX_DEPLOYMENT_TARGET: '10.14'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: rustup update && rustup target add aarch64-apple-darwin
      - uses: Swatinem/rust-cache@v2
      - run: cargo build --release
        working-directory: ./server
      - run: cargo build --release --target aarch64-apple-darwin
        working-directory: ./server
      - uses: actions/upload-artifact@v3
        with:
          name: oxigraph_server_x86_64_apple
          path: target/release/oxigraph_server
      - uses: actions/upload-artifact@v3
        with:
          name: oxigraph_server_aarch64_apple
          path: target/aarch64-apple-darwin/release/oxigraph_server
      - run: mv target/release/oxigraph_server oxigraph_server_${{ github.event.release.tag_name }}_x86_64_apple
        if: github.event_name == 'release'
      - run: mv target/aarch64-apple-darwin/release/oxigraph_server oxigraph_server_${{ github.event.release.tag_name }}_aarch64_apple
        if: github.event_name == 'release'
      - uses: softprops/action-gh-release@v1
        with:
          files: |
            oxigraph_server_${{ github.event.release.tag_name }}_x86_64_apple
            oxigraph_server_${{ github.event.release.tag_name }}_aarch64_apple
        if: github.event_name == 'release'

  binary_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: rustup update
      - uses: Swatinem/rust-cache@v2
      - run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse
      - run: cargo build --release
        working-directory: ./server
      - uses: actions/upload-artifact@v3
        with:
          name: oxigraph_server_x86_64_windows_msvc
          path: target/release/oxigraph_server.exe
      - run: mv target/release/oxigraph_server.exe oxigraph_server_${{ github.event.release.tag_name }}_x86_64_windows_msvc.exe
        if: github.event_name == 'release'
      - uses: softprops/action-gh-release@v1
        with:
          files: oxigraph_server_${{ github.event.release.tag_name }}_x86_64_windows_msvc.exe
        if: github.event_name == 'release'

  python_sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: rustup update
      - uses: Swatinem/rust-cache@v2
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: '**/requirements.dev.txt'
      - run: pip install -r python/requirements.dev.txt
      - run: maturin build -m python/Cargo.toml
      - run: pip install --no-index --find-links=target/wheels/ pyoxigraph
      - run: rm -r target/wheels
      - run: python generate_stubs.py pyoxigraph pyoxigraph.pyi --black
        working-directory: ./python
      - run: maturin sdist -m python/Cargo.toml
      - uses: actions/upload-artifact@v3
        with:
          name: pyoxigraph_source
          path: target/wheels/*.tar.gz
      - run: pip install twine && twine upload target/wheels/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        if: github.event_name == 'release'

  wheel_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [ "x86_64", "aarch64" ]
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/${{ matrix.architecture }}
        if: github.event_name == 'release' && matrix.architecture != 'x86_64'
      - run: sed 's/%arch%/${{ matrix.architecture }}/g' .github/workflows/manylinux_build.sh | sed 's/%for_each_version%/${{ github.event_name == 'release' || '' }}/g' > .github/workflows/manylinux_build_script.sh
      - run: docker run -v "$(pwd)":/workdir --platform linux/${{ matrix.architecture }} quay.io/pypa/manylinux2014_${{ matrix.architecture }} /bin/bash /workdir/.github/workflows/manylinux_build_script.sh
        if: github.event_name == 'release' || matrix.architecture == 'x86_64'
      - uses: actions/upload-artifact@v3
        with:
          name: pyoxigraph_wheel_x86_64_linux
          path: target/wheels/*.whl
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
          packages-dir: target/wheels
        if: github.event_name == 'release'

  wheel_linux_musl:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [ "x86_64", "aarch64" ]
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/${{ matrix.architecture }}
        if: github.event_name == 'release' && matrix.architecture != 'x86_64'
      - run: sed 's/%arch%/${{ matrix.architecture }}/g' .github/workflows/musllinux_build.sh | sed 's/%for_each_version%/${{ github.event_name == 'release' || '' }}/g' > .github/workflows/musllinux_build_script.sh
      - run: docker run -v "$(pwd)":/workdir --platform linux/${{ matrix.architecture }} quay.io/pypa/musllinux_1_1_${{ matrix.architecture }} /bin/bash /workdir/.github/workflows/musllinux_build_script.sh
        if: github.event_name == 'release' || matrix.architecture == 'x86_64'
      - uses: actions/upload-artifact@v3
        with:
          name: pyoxigraph_wheel_x86_64_linux_musl
          path: target/wheels/*.whl
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
          packages-dir: target/wheels
        if: github.event_name == 'release'

  wheel_mac:
    runs-on: macos-latest
    env:
      DEVELOPER_DIR: '/Applications/Xcode.app/Contents/Developer'
      SDKROOT: '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk'
      MACOSX_DEPLOYMENT_TARGET: '10.14'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: rustup update && rustup target add aarch64-apple-darwin
      - uses: Swatinem/rust-cache@v2
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: '**/requirements.dev.txt'
      - run: pip install -r python/requirements.dev.txt
      - run: maturin build --release -m python/Cargo.toml --features abi3
      - run: pip install --no-index --find-links=target/wheels/ pyoxigraph
      - run: rm -r target/wheels
      - run: python generate_stubs.py pyoxigraph pyoxigraph.pyi --black
        working-directory: ./python
      - run: maturin build --release --target universal2-apple-darwin -m python/Cargo.toml --features abi3
      - run: maturin build --release -m python/Cargo.toml --features abi3
        if: github.event_name == 'release'
      - run: maturin build --release --target aarch64-apple-darwin -m python/Cargo.toml --features abi3
        if: github.event_name == 'release'
      - uses: actions/upload-artifact@v3
        with:
          name: pyoxigraph_wheel_universal2_mac
          path: target/wheels/*.whl
      - run: pip install twine && twine upload target/wheels/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        if: github.event_name == 'release'

  wheel_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: rustup update
      - uses: Swatinem/rust-cache@v2
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: '**/requirements.dev.txt'
      - run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse
      - run: pip install -r python/requirements.dev.txt
      - run: maturin build --release -m python/Cargo.toml --features abi3
      - run: pip install --no-index --find-links=target/wheels/ pyoxigraph
      - run: rm -r target/wheels
      - run: python generate_stubs.py pyoxigraph pyoxigraph.pyi --black
        working-directory: ./python
      - run: maturin build --release -m python/Cargo.toml --features abi3
      - uses: actions/upload-artifact@v3
        with:
          name: pyoxigraph_wheel_x86_64_windows
          path: target/wheels/*.whl
      - run: pip install twine && twine upload target/wheels/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        if: github.event_name == 'release'

  npm_tarball:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: rustup update
      - uses: Swatinem/rust-cache@v2
      - run: cargo install wasm-pack || true
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: "js/package.json"
          registry-url: https://registry.npmjs.org
      - run: npm run pack
        working-directory: ./js
      - uses: actions/upload-artifact@v3
        with:
          name: oxigraph_wasm_npm
          path: js/*.tgz
      - run: npm run release
        working-directory: ./js
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: github.event_name == 'release'

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: github.event_name == 'release'
      - uses: docker/metadata-action@v4
        id: docker_meta
        with:
          images: |
            ${{ github.repository }},enable=${{ github.event_name == 'release' }}
            ghcr.io/${{ github.repository }}
      - uses: docker/build-push-action@v4
        with:
          context: .
          file: server/Dockerfile
          platforms: linux/amd64,linux/arm64
          pull: true
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish_crates:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: rustup update
      - run: cargo login $CRATES_IO_TOKEN
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      - run: cargo publish
        working-directory: ./oxrocksdb-sys
        continue-on-error: true
      - run: cargo publish
        working-directory: ./lib/oxsdatatypes
        continue-on-error: true
      - run: cargo publish
        working-directory: ./lib/oxrdf
        continue-on-error: true
      - run: cargo publish
        working-directory: ./lib/sparesults
        continue-on-error: true
      - run: cargo publish
        working-directory: ./lib/spargebra
        continue-on-error: true
      - run: cargo publish
        working-directory: ./lib/sparql-smith
        continue-on-error: true
      - run: cargo publish
        working-directory: ./lib
        continue-on-error: true
      - run: cargo publish
        working-directory: ./server

  homebrew:
    if: "github.event_name == 'release' && !contains('-', github.event.release.tag_name)"
    runs-on: ubuntu-latest
    needs: full_archive
    steps:
      - uses: actions/checkout@v3
        with:
          repository: oxigraph/homebrew-oxigraph
          token: ${{ secrets.FULL_ACCESS_TOKEN }}
      - run: |
          wget "https://github.com/oxigraph/oxigraph/releases/download/${{ github.event.release.tag_name }}/oxigraph_${{ github.event.release.tag_name }}.tar.gz"
          SHA=`shasum -a 256 "oxigraph_${{ github.event.release.tag_name }}.tar.gz" | awk '{ print $1 }'`
          rm "oxigraph_${{ github.event.release.tag_name }}.tar.gz"
          sed -i "s/download\/.*\.tar/download\/${{ github.event.release.tag_name }}\/oxigraph_${{ github.event.release.tag_name }}.tar/g" Formula/oxigraph.rb
          sed -i "s/sha256 \".*\"/sha256 \"$SHA\"/g" Formula/oxigraph.rb
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git diff-index --quiet HEAD || git commit -m "Upgrades to ${{ github.event.release.tag_name }}"
          git push

  full_archive:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: |
          rm -rf .git bench fuzz
          zip -r oxigraph_${{ github.event.release.tag_name }}.zip .
          tar -czf /tmp/oxigraph_${{ github.event.release.tag_name }}.tar.gz .
          mv /tmp/oxigraph_${{ github.event.release.tag_name }}.tar.gz .
      - uses: softprops/action-gh-release@v1
        with:
          files: |
            oxigraph_${{ github.event.release.tag_name }}.zip
            oxigraph_${{ github.event.release.tag_name }}.tar.gz
