name: Change tests

on:
  pull_request:
    branches:
      - main
      - next
  push:
    branches:
      - main
      - next

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-rust
        with:
          component: rustfmt
      - run: cargo fmt -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
        with:
          version: 1.82.0
          component: clippy
      - run: cargo clippy --all-targets -- -D warnings -D clippy::all
        working-directory: ./lib/oxsdatatypes
      - run: cargo clippy --all-targets -- -D warnings -D clippy::all
        working-directory: ./lib/oxrdf
      - run: cargo clippy --all-targets -- -D warnings -D clippy::all
        working-directory: ./lib/oxrdfxml
      - run: cargo clippy --all-targets -- -D warnings -D clippy::all
        working-directory: ./lib/oxttl
      - run: cargo clippy --all-targets -- -D warnings -D clippy::all
        working-directory: ./lib/oxrdfio
      - run: cargo clippy --all-targets --features async-tokio -- -D warnings -D clippy::all
        working-directory: ./lib/oxrdfio
      - run: cargo clippy --all-targets -- -D warnings -D clippy::all
        working-directory: ./lib/sparesults
      - run: cargo clippy --all-targets --features async-tokio -- -D warnings -D clippy::all
        working-directory: ./lib/sparesults
      - run: cargo clippy --all-targets -- -D warnings -D clippy::all
        working-directory: ./lib/spargebra
      - run: cargo clippy --all-targets -- -D warnings -D clippy::all
        working-directory: ./lib/sparopt
      - run: cargo clippy --all-targets -- -D warnings -D clippy::all
        working-directory: ./lib/spareval
      - run: cargo clippy --all-targets --features rdf-star -- -D warnings -D clippy::all
        working-directory: ./lib/spareval
      - run: cargo clippy --all-targets --features sep-0002 -- -D warnings -D clippy::all
        working-directory: ./lib/spareval
      - run: cargo clippy --all-targets --features sep-0006 -- -D warnings -D clippy::all
        working-directory: ./lib/spareval
      - run: cargo clippy --all-targets --no-default-features -- -D warnings -D clippy::all
        working-directory: ./lib/oxigraph
      - run: cargo clippy --all-targets -- -D warnings -D clippy::all
        working-directory: ./lib/oxigraph
      - run: cargo clippy --all-targets -- -D warnings -D clippy::all
        working-directory: ./python
      - run: cargo clippy --all-targets -- -D warnings -D clippy::all
        working-directory: ./cli
      - run: cargo clippy --all-targets -- -D warnings -D clippy::all
        working-directory: ./testsuite

  clippy_wasm_js:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
        with:
          version: 1.82.0
          target: wasm32-unknown-unknown
          component: clippy
      - run: cargo clippy --lib --tests --target wasm32-unknown-unknown -- -D warnings -D clippy::all
        working-directory: ./js

  clippy_wasip1:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
        with:
          version: 1.82.0
          target: wasm32-wasip1
          component: clippy
      - run: cargo clippy --lib --tests --target wasm32-wasip1 -- -D warnings -D clippy::all
        working-directory: ./lib/oxigraph
      - run: cargo clippy --target wasm32-wasip1 --features abi3 --no-default-features -- -D warnings -D clippy::all
        working-directory: ./python

  clippy_wasm_emscripten:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
        with:
          version: 1.82.0
          target: wasm32-unknown-emscripten
          component: clippy
      - run: cargo clippy --lib --tests --target wasm32-unknown-emscripten -- -D warnings -D clippy::all
        working-directory: ./lib/oxigraph
      - run: cargo clippy --target wasm32-unknown-emscripten --features abi3 -- -D warnings -D clippy::all
        working-directory: ./python

  clippy_wasm_unknown:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
        with:
          version: 1.82.0
          target: wasm32-unknown-unknown
          component: clippy
      - run: cargo clippy --lib --tests --target wasm32-unknown-unknown --features getrandom/custom --features oxsdatatypes/custom-now -- -D warnings -D clippy::all
        working-directory: ./lib/oxigraph

  deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@v2
        with: { tool: cargo-deny }
      - run: cargo deny check

  semver_checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
      - uses: taiki-e/install-action@v2
        with: { tool: cargo-semver-checks }
      - uses: actions/cache@v4
        with:
          path: rocksdb
          key: ${{ runner.os }}-rocksdb-8.0.0
      - run: bash .github/workflows/install_rocksdb.sh
      - run: cargo semver-checks check-release --exclude oxrocksdb-sys --exclude oxigraph-js --exclude pyoxigraph --exclude oxigraph-testsuite --exclude oxigraph-cli --exclude spareval

  test_os:
    strategy:
      matrix:
        os-version: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os-version }}
    name: Test on ${{ matrix.os-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
      - run: cargo test

  test_linux_i686:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
        with:
          target: i686-unknown-linux-gnu
      - run: sudo apt-get update && sudo apt-get install -y g++-multilib
      - run: cargo test --target i686-unknown-linux-gnu --all-features
        working-directory: ./lib/oxsdatatypes
      - run: cargo test --target i686-unknown-linux-gnu --all-features
        working-directory: ./lib/oxrdf
      - run: cargo test --target i686-unknown-linux-gnu --all-features
        working-directory: ./lib/oxrdfxml
      - run: cargo test --target i686-unknown-linux-gnu --all-features
        working-directory: ./lib/oxttl
      - run: cargo test --target i686-unknown-linux-gnu --all-features
        working-directory: ./lib/oxrdfio
      - run: cargo test --target i686-unknown-linux-gnu --all-features
        working-directory: ./lib/sparesults
      - run: cargo test --target i686-unknown-linux-gnu --all-features
        working-directory: ./lib/spargebra
      - run: cargo test --target i686-unknown-linux-gnu --all-features
        working-directory: ./lib/sparopt
      - run: cargo test --target i686-unknown-linux-gnu --all-features
        working-directory: ./lib/spareval
      - run: cargo test --target i686-unknown-linux-gnu --features http-client-rustls-native
        working-directory: ./lib/oxigraph
      - run: cargo test --target i686-unknown-linux-gnu
        working-directory: ./testsuite

  test_linux_msv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: echo "rust-version=$(sed -ne 's/rust-version *= *\"\(.*\)\"/\1/p' Cargo.toml)" >> $GITHUB_OUTPUT
        id: metadata
      - run: mkdir .cargo && echo "resolver.incompatible-rust-versions = \"fallback\"" >> .cargo/config.toml
      - uses: ./.github/actions/setup-rust
        with:
          version: ${{ steps.metadata.outputs.rust-version }}
      - run: rustup toolchain install nightly
      - run: rm Cargo.lock && cargo +nightly update -Z direct-minimal-versions
      - run: cargo test --workspace --exclude sparql-smith

  test_linux_latest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
      - run: rm Cargo.lock && cargo update
      - run: cargo test

  test_linux_address_sanitizer:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
        with:
          version: nightly
      - run: sudo apt-get update && sudo apt-get install -y llvm
      - run: cargo test --tests --target x86_64-unknown-linux-gnu --workspace --exclude pyoxigraph --exclude oxigraph-testsuite --exclude oxigraph-cli
        env:
          RUSTFLAGS: -Z sanitizer=address

  test_linux_dynamic_linking:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
      - uses: actions/cache@v4
        with:
          path: rocksdb
          key: ${{ runner.os }}-rocksdb-8.0.0
      - run: bash .github/workflows/install_rocksdb.sh
      - run: cargo test --tests --features oxrocksdb-sys/pkg-config

  test_wasip1:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
        with:
          target: wasm32-wasip1
      - uses: taiki-e/install-action@v2
        with: { tool: "wasmtime" }
      - run: cargo test --target wasm32-wasip1 --workspace --exclude oxigraph-js --exclude oxigraph-cli --exclude oxigraph-testsuite --exclude oxrocksdb-sys --exclude pyoxigraph
        env:
          CARGO_TARGET_WASM32_WASIP1_RUNNER: wasmtime run

  rustdoc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
        with:
          version: 1.82.0
      - run: cargo doc --no-deps
        env:
          RUSTDOCFLAGS: -D warnings

  js:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-rust
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: "js/package.json"
      - run: npm install
        working-directory: ./js
      - run: npm test
        working-directory: ./js

  python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.13"
          enable-cache: true
          cache-dependency-glob: "**/requirements**.txt"
      - run: uv pip install -r python/requirements.dev.txt
      - run: maturin build -m python/Cargo.toml
      - run: uv pip install --no-index --find-links=target/wheels/ pyoxigraph
      - run: rm -r target/wheels
      - run: python -m unittest
        working-directory: ./python/tests
      - run: sphinx-build -M html . build
        working-directory: ./python/docs
      - run: python generate_stubs.py pyoxigraph pyoxigraph.pyi --ruff
        working-directory: ./python
      - run: python -m mypy.stubtest pyoxigraph  --allowlist=mypy_allowlist.txt
        working-directory: ./python
      - run: python -m mypy generate_stubs.py tests --strict
        working-directory: ./python
      - run: python -m ruff format --check .
        working-directory: ./python
      - run: python -m ruff check --output-format=github .
        working-directory: ./python
      - run: sphinx-lint docs
        working-directory: ./python

  python_msv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: echo "rust-version=$(sed -ne 's/rust-version *= *\"\(.*\)\"/\1/p' Cargo.toml)" >> $GITHUB_OUTPUT
        id: metadata
      - run: mkdir .cargo && echo "resolver.incompatible-rust-versions = \"fallback\"" >> .cargo/config.toml
      - uses: ./.github/actions/setup-rust
        with:
          version: ${{ steps.metadata.outputs.rust-version }}
      - run: rustup toolchain install nightly
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.8"
          enable-cache: true
          cache-dependency-glob: "**/requirements**.txt"
      - run: uv pip install -r python/requirements.dev.txt
      - run: rm Cargo.lock && cargo +nightly update -Z direct-minimal-versions
      - run: maturin build -m python/Cargo.toml
      - run: uv pip install --no-index --find-links=target/wheels/ pyoxigraph
      - run: rm -r target/wheels
      - run: python -m unittest
        working-directory: ./python/tests

  python_pypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: "pypy3.10"
          enable-cache: true
          cache-dependency-glob: "**/requirements**.txt"
      - run: uv pip install -r python/requirements.dev.txt
      - run: maturin build -m python/Cargo.toml
      - run: uv pip install --no-index --find-links=target/wheels/ pyoxigraph
      - run: rm -r target/wheels
      - run: python -m unittest
        working-directory: ./python/tests

  python_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.13"
          enable-cache: true
          cache-dependency-glob: "**/requirements**.txt"
      - run: uv run --with "maturin~=1.0" maturin build -m python/Cargo.toml
      - run: uv pip install --no-index --find-links=target/wheels/ pyoxigraph
      - run: rm -r target/wheels
      - run: python -m unittest
        working-directory: ./python/tests

  typos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@v2
        with: { tool: typos-cli }
      - run: typos

  clang_fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update && sudo apt-get install -y clang-format
      - run: clang-format --Werror --dry-run oxrocksdb-sys/api/*

  fuzz_changes:
    strategy:
      matrix:
        include:
          - target: "sparql_query_eval"
            build_args: "--features sparql-smith/service"
            run_args: "-fork=1 -ignore_timeouts=1"
          - target: "sparql_update_eval"
            build_args: "--features rocksdb"
            run_args: "-fork=1 -ignore_timeouts=1"
          - target: "sparql_results_json"
          - target: "sparql_results_tsv"
          - target: "sparql_results_xml"
          - target: "n3"
          - target: "nquads"
          - target: "trig"
          - target: "rdf_xml"
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/cache@v4
        id: cache-corpus
        with:
          path: fuzz/corpus/${{ matrix.target }}
          key: fuzz-${{ matrix.target }}-${{ github.run_id }}
          restore-keys: |
            fuzz-${{ matrix.target }}
      - uses: ./.github/actions/setup-rust
        with:
          cache-key: ${{ matrix.target }}
      - run: cargo install cargo-fuzz || true
      - run: python3 build_corpus.py
        working-directory: ./fuzz
        if: steps.cache-corpus.outputs.cache-hit != 'true'
      - run: cargo fuzz run ${{ matrix.target }} --sanitizer none ${{ matrix.build_args }} -- -max_total_time=200 -timeout=5 ${{ matrix.run_args }}
      - run: cargo fuzz cmin ${{ matrix.target }} --sanitizer none ${{ matrix.build_args }}
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: fuzz-artifacts-${{ matrix.target }}
          path: fuzz/artifacts/${{ matrix.target }}

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update && sudo apt-get install -y shellcheck
      - run: git grep -l '^#\( *shellcheck \|!\(/bin/\|/usr/bin/env \)\(sh\|bash\|dash\|ksh\)\)' | xargs shellcheck

  spec_links:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: python lints/test_spec_links.py

  debian_compatibility:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-rust
      - run: python lints/test_debian_compatibility.py

  codspeed:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_args:
          - "-p oxigraph --features http-client-native-tls"
          - "-p oxigraph-testsuite"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
      - uses: taiki-e/install-action@v2
        with: { tool: cargo-codspeed }
      - run: cargo codspeed build ${{ matrix.build_args }}
      - uses: CodSpeedHQ/action@v3
        with:
          run: cargo codspeed run
          token: ${{ secrets.CODSPEED_TOKEN }}

  codspeed_js:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
          cache-dependency-path: "js/package.json"
      - run: npm install
        working-directory: ./js
      - run: npm run build-node
        working-directory: ./js
      - uses: CodSpeedHQ/action@v3
        with:
          run: npx vitest bench
          token: ${{ secrets.CODSPEED_TOKEN }}
          working-directory: ./js

  codecov:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ./.github/actions/setup-rust
        with:
          component: llvm-tools-preview
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.13"
          enable-cache: true
          cache-dependency-glob: "**/requirements**.txt"
      - uses: taiki-e/install-action@v2
        with: { tool: cargo-llvm-cov }
      - run: |
          source <(cargo llvm-cov show-env --export-prefix)
          export CARGO_TARGET_DIR=$CARGO_LLVM_COV_TARGET_DIR
          cargo llvm-cov clean --workspace
          cargo test --features oxrdfio/async-tokio,sparesults/async-tokio
          uv run --with "maturin~=1.0" maturin build -m python/Cargo.toml
          uv pip install --no-index --find-links=target/wheels/ pyoxigraph
          cd python/tests
          uv run -m unittest
          cd ../..
          cargo llvm-cov report --codecov --output-path codecov.json
      - uses: codecov/codecov-action@v5
        with:
          files: codecov.json
          flags: rust
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
